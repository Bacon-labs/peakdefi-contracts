{
  "version": 3,
  "file": "Test.js",
  "sourceRoot": "",
  "sources": [
    "Test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "PeakDeFiFund = artifacts.require \"PeakDeFiFund\"\r\nControlToken = artifacts.require \"ControlToken\"\r\nShareToken = artifacts.require \"ShareToken\"\r\nTestKyberNetwork = artifacts.require \"TestKyberNetwork\"\r\nTestToken = artifacts.require \"TestToken\"\r\nTestTokenFactory = artifacts.require \"TestTokenFactory\"\r\n\r\nETH_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\nepsilon = 1e-6\r\n\r\nETH_PRICE = 600\r\nAST_PRICE = 1000\r\nETH_PRECISION = 1e18\r\nAST_PRECISION = 1e11\r\nEXIT_FEE = 0.03\r\n\r\nFUND = (cycle, phase, account) ->\r\n  fund = await PeakDeFiFund.deployed()\r\n  if cycle-1 > 0\r\n    for i in [1..cycle-1]\r\n      for j in [0..2]\r\n        await fund.nextPhase({from: account})\r\n  if phase >= 0\r\n    for i in [0..phase]\r\n      await fund.nextPhase({from: account})\r\n  return fund\r\n\r\nUSDC = (fund) ->\r\n  usdcAddr = await fund.usdcAddr.call()\r\n  return TestToken.at(usdcAddr)\r\n\r\nKN = (fund) ->\r\n  kyberAddr = await fund.kyberAddr.call()\r\n  return TestKyberNetwork.at(kyberAddr)\r\n\r\nTK = (symbol) ->\r\n  factory = await TestTokenFactory.deployed()\r\n  addr = await factory.getToken.call(symbol)\r\n  return TestToken.at(addr)\r\n\r\nST = () -> await ShareToken.deployed()\r\n\r\nREP = () -> await ControlToken.deployed()\r\n\r\nepsilon_equal = (curr, prev) ->\r\n  curr.sub(prev).div(prev).abs().lt(epsilon)\r\n\r\ncontract(\"first_cycle\", (accounts) ->\r\n  owner = accounts[0]\r\n  account = accounts[1]\r\n\r\n  it(\"start_cycle\", () ->\r\n    fund = await FUND(1, -1, owner)\r\n\r\n    # start cycle\r\n    await fund.nextPhase({from: owner})\r\n\r\n    # check phase\r\n    cyclePhase = +await fund.cyclePhase.call()\r\n    assert.equal(cyclePhase, 0, \"cycle phase didn't change after cycle start\")\r\n\r\n    # check cycle number\r\n    cycleNumber = +await fund.cycleNumber.call()\r\n    assert.equal(cycleNumber, 1, \"cycle number didn't change after cycle start\")\r\n  )\r\n\r\n  it(\"deposit_ether\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    st = await ST()\r\n\r\n    # deposit ether\r\n    amount = ETH_PRECISION\r\n    prevEtherBlnce = await web3.eth.getBalance(account)\r\n    await fund.deposit({from: account, value: amount, gasPrice: 0})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account)\r\n    assert.equal(shareBlnce.toNumber(), amount * ETH_PRICE, \"received share amount incorrect\")\r\n\r\n    # check fund balance\r\n    fundBalance = await fund.totalFundsInUSDC.call()\r\n    assert.equal(fundBalance.toNumber(), amount * ETH_PRICE, \"fund balance incorrect\")\r\n\r\n    # check user ether balance\r\n    etherBlnce = await web3.eth.getBalance(account)\r\n    assert.equal(prevEtherBlnce.sub(etherBlnce).toNumber(), amount, \"ether balance increase incorrect\")\r\n  )\r\n\r\n  it(\"deposit_usdc\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    usdc = await USDC(fund)\r\n    st = await ST()\r\n    account2 = accounts[2]\r\n\r\n    # mint USDC for user\r\n    amount = 1 * ETH_PRECISION\r\n    await usdc.mint(account2, amount, {from: owner})\r\n\r\n    # deposit USDC\r\n    fundBalance = await fund.totalFundsInUSDC.call()\r\n    prevUSDCBlnce = await usdc.balanceOf.call(account2)\r\n    prevShareBlnce = await st.balanceOf.call(account2)\r\n    await usdc.approve(fund.address, amount, {from: account2})\r\n    await fund.depositToken(usdc.address, amount, {from: account2})\r\n    await usdc.approve(fund.address, 0, {from: account2})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account2)\r\n    assert.equal(shareBlnce.sub(prevShareBlnce).toNumber(), amount, \"received share amount incorrect\")\r\n\r\n    # check fund balance\r\n    newFundBalance = await fund.totalFundsInUSDC.call()\r\n    assert.equal(newFundBalance.sub(fundBalance).toNumber(), amount, \"fund balance increase incorrect\")\r\n\r\n    # check usdc balance\r\n    usdcBlnce = await await usdc.balanceOf.call(account2)\r\n    assert.equal(prevUSDCBlnce.sub(usdcBlnce).toNumber(), amount, \"USDC balance decrease incorrect\")\r\n  )\r\n\r\n  it(\"deposit_token\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    token = await TK(\"AST\")\r\n    st = await ST()\r\n\r\n    # mint token for user\r\n    amount = 1000 * AST_PRECISION\r\n    await token.mint(account, amount, {from: owner})\r\n\r\n    # deposit token\r\n    fundBalance = await fund.totalFundsInUSDC.call()\r\n    prevTokenBlnce = await token.balanceOf.call(account)\r\n    prevShareBlnce = await st.balanceOf.call(account)\r\n    await token.approve(fund.address, amount, {from: account})\r\n    await fund.depositToken(token.address, amount, {from: account})\r\n    await token.approve(fund.address, 0, {from: account})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account)\r\n    assert.equal(shareBlnce.sub(prevShareBlnce).toNumber(), Math.round(amount * AST_PRICE * ETH_PRECISION / AST_PRECISION), \"received share amount incorrect\")\r\n\r\n    # check fund balance\r\n    newFundBalance = await fund.totalFundsInUSDC.call()\r\n    assert.equal(newFundBalance.sub(fundBalance).toNumber(), Math.round(amount * AST_PRICE * ETH_PRECISION / AST_PRECISION), \"fund balance increase incorrect\")\r\n\r\n    # check token balance\r\n    tokenBlnce = await await token.balanceOf.call(account)\r\n    assert.equal(prevTokenBlnce.sub(tokenBlnce).toNumber(), amount, \"token balance decrease incorrect\")\r\n  )\r\n\r\n  it(\"withdraw_ether\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    st = await ST()\r\n\r\n    # withdraw ether\r\n    amount = 0.1 * ETH_PRECISION\r\n    prevShareBlnce = await st.balanceOf.call(account)\r\n    prevFundBlnce = await fund.totalFundsInUSDC.call()\r\n    prevEtherBlnce = await web3.eth.getBalance(account)\r\n    await fund.withdraw(amount, {from: account, gasPrice: 0})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account)\r\n    assert.equal(prevShareBlnce.sub(shareBlnce).toNumber(), amount, \"burnt share amount incorrect\")\r\n\r\n    # check fund balance\r\n    fundBlnce = await fund.totalFundsInUSDC.call()\r\n    assert.equal(prevFundBlnce.sub(fundBlnce).toNumber(), amount, \"fund balance decrease incorrect\")\r\n\r\n    # check ether balance\r\n    etherBlnce = await web3.eth.getBalance(account)\r\n    assert.equal(etherBlnce.sub(prevEtherBlnce).toNumber(), Math.round(amount * (1 - EXIT_FEE) / ETH_PRICE), \"ether balance increase incorrect\")\r\n  )\r\n\r\n  it(\"withdraw_usdc\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    usdc = await USDC(fund)\r\n    st = await ST()\r\n\r\n    # withdraw usdc\r\n    amount = 0.1 * ETH_PRECISION\r\n    prevShareBlnce = await st.balanceOf.call(account)\r\n    prevFundBlnce = await fund.totalFundsInUSDC.call()\r\n    prevUSDCBlnce = await usdc.balanceOf.call(account)\r\n    await fund.withdrawToken(usdc.address, amount, {from: account})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account)\r\n    assert.equal(prevShareBlnce.sub(shareBlnce).toNumber(), amount, \"burnt share amount incorrect\")\r\n\r\n    # check fund balance\r\n    fundBlnce = await fund.totalFundsInUSDC.call()\r\n    assert.equal(prevFundBlnce.sub(fundBlnce).toNumber(), amount, \"fund balance decrease incorrect\")\r\n\r\n    # check usdc balance\r\n    usdcBlnce = await await usdc.balanceOf.call(account)\r\n    assert.equal(usdcBlnce.sub(prevUSDCBlnce).toNumber(), amount * (1 - EXIT_FEE), \"USDC balance increase incorrect\")\r\n  )\r\n\r\n  it(\"withdraw_token\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    token = await TK(\"AST\")\r\n    st = await ST()\r\n\r\n    # withdraw token\r\n    amount = 1 * ETH_PRECISION\r\n\r\n    prevShareBlnce = await st.balanceOf.call(account)\r\n    prevFundBlnce = await fund.totalFundsInUSDC.call()\r\n    prevTokenBlnce = await token.balanceOf.call(account)\r\n    await fund.withdrawToken(token.address, amount, {from: account})\r\n\r\n    # check shares\r\n    shareBlnce = await st.balanceOf.call(account)\r\n    assert.equal(prevShareBlnce.sub(shareBlnce).toNumber(), amount, \"burnt share amount incorrect\")\r\n\r\n    # check fund balance\r\n    fundBlnce = await fund.totalFundsInUSDC.call()\r\n    assert.equal(prevFundBlnce.sub(fundBlnce).toNumber(), amount, \"fund balance decrease incorrect\")\r\n\r\n    # check token balance\r\n    tokenBlnce = await await token.balanceOf.call(account)\r\n    assert.equal(tokenBlnce.sub(prevTokenBlnce).toNumber(), Math.round(amount * (1 - EXIT_FEE) * AST_PRECISION / ETH_PRECISION / AST_PRICE), \"USDC balance increase incorrect\")\r\n  )\r\n\r\n  it(\"phase_0_to_1\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    await fund.nextPhase({from: owner})\r\n  )\r\n\r\n  it(\"buy_ether_and_sell\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    rep = await REP()\r\n\r\n    prevREPBlnce = await rep.balanceOf.call(account)\r\n    prevFundEtherBlnce = await web3.eth.getBalance(fund.address)\r\n\r\n    # buy ether\r\n    amount = 0.01 * ETH_PRECISION\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    await fund.createInvestment(ETH_TOKEN_ADDRESS, amount, {from: account, gasPrice: 0})\r\n\r\n    # check REP balance\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert.equal(prevREPBlnce.sub(repBlnce).toNumber(), amount, \"RepToken balance decrease incorrect\")\r\n\r\n    # check fund ether balance\r\n    fundUSDCBlnce = await fund.totalFundsInUSDC.call()\r\n    repTotalSupply = await rep.totalSupply.call()\r\n    fundEtherBlnce = await web3.eth.getBalance(fund.address)\r\n    assert.equal(fundEtherBlnce.sub(prevFundEtherBlnce).toNumber(), Math.floor(fundUSDCBlnce.div(repTotalSupply).mul(amount).div(ETH_PRICE).toNumber()), \"ether balance increase incorrect\")\r\n\r\n    # sell ether\r\n    await fund.sellInvestmentAsset(0, {from: account, gasPrice: 0})\r\n\r\n    # check REP balance\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert(epsilon_equal(repBlnce, prevREPBlnce), \"RepToken balance changed\")\r\n\r\n    # check fund ether balance\r\n    fundEtherBlnce = await web3.eth.getBalance(fund.address)\r\n    assert.equal(fundEtherBlnce.toNumber(), prevFundEtherBlnce.toNumber(), \"fund ether balance changed\")\r\n  )\r\n\r\n  it(\"buy_token_and_sell\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    rep = await REP()\r\n    token = await TK(\"AST\")\r\n\r\n    prevREPBlnce = await rep.balanceOf.call(account)\r\n    prevFundTokenBlnce = await token.balanceOf(fund.address)\r\n\r\n    # buy token\r\n    amount = 100 * ETH_PRECISION\r\n    await fund.createInvestment(token.address, amount, {from: account, gasPrice: 0})\r\n\r\n    # check REP balance\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert.equal(prevREPBlnce.sub(repBlnce).toNumber(), amount, \"RepToken balance decrease incorrect\")\r\n\r\n    # check fund token balance\r\n    fundUSDCBlnce = await fund.totalFundsInUSDC.call()\r\n    repTotalSupply = await rep.totalSupply.call()\r\n    fundTokenBlnce = await token.balanceOf(fund.address)\r\n    assert.equal(fundTokenBlnce.sub(prevFundTokenBlnce).toNumber(), Math.floor(fundUSDCBlnce.mul(AST_PRECISION).div(repTotalSupply).mul(amount).div(AST_PRICE).div(ETH_PRECISION).toNumber()), \"token balance increase incorrect\")\r\n\r\n    # sell token\r\n    await fund.sellInvestmentAsset(1, {from: account, gasPrice: 0})\r\n\r\n    # check REP balance\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert(epsilon_equal(repBlnce, prevREPBlnce), \"RepToken balance changed\")\r\n\r\n    # check fund token balance\r\n    fundTokenBlnce = await token.balanceOf(fund.address)\r\n    assert.equal(fundTokenBlnce.toNumber(), prevFundTokenBlnce.toNumber(), \"fund token balance changed\")\r\n  )\r\n\r\n  it(\"phase_1_to_2\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    await fund.nextPhase({from: owner})\r\n  )\r\n\r\n  it(\"redeem_commission\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    usdc = await USDC(fund)\r\n\r\n    prevUSDCBlnce = await usdc.balanceOf.call(account)\r\n\r\n    # redeem commission\r\n    await fund.redeemCommission({from: account})\r\n\r\n    # check USDC balance\r\n    usdcBlnce = await usdc.balanceOf.call(account)\r\n    assert(usdcBlnce.sub(prevUSDCBlnce).toNumber() > 0, \"didn't receive commission\")\r\n    # TODO: actually check the amount\r\n  )\r\n\r\n  it(\"redeem_commission_in_shares\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    st = await ST()\r\n    account2 = accounts[2]\r\n\r\n    prevShareBlnce = await st.balanceOf.call(account2)\r\n\r\n    # redeem commission\r\n    await fund.redeemCommissionInShares({from: account2})\r\n\r\n    # check Share balance\r\n    shareBlnce = await st.balanceOf.call(account2)\r\n    assert(shareBlnce.sub(prevShareBlnce).toNumber() > 0, \"didn't receive commission\")\r\n    # TODO: actually check the amount\r\n  )\r\n\r\n  it(\"next_cycle\", () ->\r\n    fund = await PeakDeFiFund.deployed()\r\n    await fund.nextPhase({from: owner})\r\n  )\r\n)\r\n\r\ncontract(\"price_changes\", (accounts) ->\r\n  owner = accounts[0]\r\n  account = accounts[1]\r\n\r\n  it(\"prep_work\", () ->\r\n    this.fund = await FUND(1, 0, owner) # Starts in Deposit & Withdraw phase\r\n    usdc = await USDC(this.fund)\r\n    amount = 10 * ETH_PRECISION\r\n    await usdc.mint(account, amount, {from: owner}) # Mint USDC\r\n    await usdc.approve(this.fund.address, amount, {from: account}) # Approve transfer\r\n    await this.fund.depositToken(usdc.address, amount, {from: account}) # Deposit for account\r\n    await this.fund.nextPhase({from: owner}) # Go to Decision Making phase\r\n  )\r\n\r\n  it(\"raise_asset_price\", () ->\r\n    kn = await KN(this.fund)\r\n    rep = await REP()\r\n    ast = await TK(\"AST\")\r\n\r\n    # reset asset price\r\n    await kn.setTokenPrice(ast.address, AST_PRICE, {from: owner})\r\n\r\n    # invest in asset\r\n    prevREPBlnce = await rep.balanceOf.call(account)\r\n\r\n    stake = 0.1 * ETH_PRECISION\r\n    investmentId = 0\r\n    await this.fund.createInvestment(ast.address, stake, {from: account})\r\n\r\n    # raise asset price\r\n    delta = 0.2\r\n    newPrice = AST_PRICE * (1 + delta)\r\n    await kn.setTokenPrice(ast.address, newPrice, {from: owner})\r\n\r\n    # sell asset\r\n    await this.fund.sellInvestmentAsset(investmentId, {from: account})\r\n\r\n    # check REP reward\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert(epsilon_equal(repBlnce.sub(prevREPBlnce).div(stake), delta), \"REP reward incorrect\")\r\n  )\r\n\r\n  it(\"lower_asset_price\", () ->\r\n    kn = await KN(this.fund)\r\n    rep = await REP()\r\n    ast = await TK(\"AST\")\r\n\r\n    # reset asset price\r\n    await kn.setTokenPrice(ast.address, AST_PRICE, {from: owner})\r\n\r\n    # invest in asset\r\n    prevREPBlnce = await rep.balanceOf.call(account)\r\n\r\n    stake = 0.1 * ETH_PRECISION\r\n    investmentId = 1\r\n    await this.fund.createInvestment(ast.address, stake, {from: account})\r\n\r\n    # lower asset price\r\n    delta = -0.2\r\n    newPrice = AST_PRICE * (1 + delta)\r\n    await kn.setTokenPrice(ast.address, newPrice, {from: owner})\r\n\r\n    # sell asset\r\n    await this.fund.sellInvestmentAsset(investmentId, {from: account})\r\n\r\n    # check REP penalty\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert(epsilon_equal(repBlnce.sub(prevREPBlnce).div(stake), delta), \"REP penalty incorrect\")\r\n  )\r\n\r\n  it(\"lower_asset_price_to_0\", () ->\r\n    kn = await KN(this.fund)\r\n    rep = await REP()\r\n    ast = await TK(\"AST\")\r\n\r\n    # reset asset price\r\n    await kn.setTokenPrice(ast.address, AST_PRICE, {from: owner})\r\n\r\n    # invest in asset\r\n    prevREPBlnce = await rep.balanceOf.call(account)\r\n\r\n    stake = 0.1 * ETH_PRECISION\r\n    investmentId = 2\r\n    await this.fund.createInvestment(ast.address, stake, {from: account})\r\n\r\n    # lower asset price\r\n    delta = -0.999\r\n    newPrice = AST_PRICE * (1 + delta)\r\n    await kn.setTokenPrice(ast.address, newPrice, {from: owner})\r\n\r\n    # sell asset\r\n    await this.fund.sellInvestmentAsset(investmentId, {from: account})\r\n\r\n    # check REP penalty\r\n    repBlnce = await rep.balanceOf.call(account)\r\n    assert(epsilon_equal(repBlnce.sub(prevREPBlnce).div(stake), delta), \"REP penalty incorrect\")\r\n  )\r\n)\r\n\r\ncontract(\"emergency_functions\", (accounts) ->\r\n  owner = accounts[0]\r\n  account = accounts[1]\r\n\r\n  depositAmount = 10 * ETH_PRECISION\r\n\r\n  it(\"prep_work\", () ->\r\n    this.fund = await FUND(1, 0, owner) # Starts in Deposit & Withdraw phase\r\n    this.usdc = await USDC(this.fund)\r\n    this.ast = await TK(\"AST\")\r\n\r\n    # Deposit tokens\r\n    await this.usdc.mint(account, depositAmount, {from: owner}) # Mint USDC\r\n    await this.usdc.approve(this.fund.address, depositAmount, {from: account}) # Approve transfer\r\n    await this.fund.depositToken(this.usdc.address, depositAmount, {from: account}) # Deposit for account\r\n\r\n    await this.fund.nextPhase({from: owner}) # Go to Decision Making phase\r\n\r\n    # Make investments\r\n    astStake = 0.01 * depositAmount\r\n    await this.fund.createInvestment(this.ast.address, astStake, {from: account})\r\n\r\n    await this.fund.pause({from: owner}) # Pause the fund contract\r\n  )\r\n\r\n  it(\"dump_tokens\", () ->\r\n    await this.fund.emergencyDumpToken(this.ast.address, {from: owner})\r\n    assert(epsilon_equal(await this.usdc.balanceOf.call(this.fund.address), depositAmount), \"fund balance changed after dumping tokens\")\r\n\r\n    await this.fund.emergencyUpdateBalance({from: owner})\r\n    assert(epsilon_equal(await this.fund.totalFundsInUSDC.call(), depositAmount), \"fund balance update failed\")\r\n  )\r\n\r\n  it(\"redeem_stake\", () ->\r\n    rep = await REP()\r\n    try\r\n      await this.fund.emergencyRedeemStake(0, {from: account})\r\n      assert.fail(\"redeemed stake when withdraw not allowed\")\r\n\r\n    await this.fund.setAllowEmergencyWithdraw(true, {from: owner}) # Allow emergency withdraw\r\n\r\n    # Redeem REP\r\n    await this.fund.emergencyRedeemStake(0, {from: account})\r\n    assert(epsilon_equal(await rep.balanceOf.call(account), depositAmount), \"REP balance changed after redemption\")\r\n\r\n    # Reset emergency withdraw status\r\n    await this.fund.setAllowEmergencyWithdraw(false, {from: owner})\r\n  )\r\n  \r\n  it(\"withdraw\", () ->\r\n    try\r\n      await this.fund.emergencyWithdraw({from: account})\r\n      assert.fail(\"withdrew funds when withdraw not allowed\")\r\n\r\n    await this.fund.setAllowEmergencyWithdraw(true, {from: owner}) # Allow emergency withdraw\r\n\r\n    # Withdraw\r\n    await this.fund.emergencyWithdraw({from: account})\r\n    assert(epsilon_equal(await this.usdc.balanceOf.call(account), depositAmount), \"withdraw amount not equal to original value\")\r\n\r\n    # Reset emergency withdraw status\r\n    await this.fund.setAllowEmergencyWithdraw(false, {from: owner})\r\n  )\r\n)\r\n\r\ncontract(\"param_setters\", (accounts) ->\r\n  owner = accounts[0]\r\n\r\n  it(\"prep_work\", () ->\r\n    this.fund = await FUND(1, 0, owner) # Starts in Deposit & Withdraw phase\r\n  )\r\n\r\n  it(\"proportion_setters\", () ->\r\n    newVal = 0.3 * ETH_PRECISION\r\n    invalidVal = 2 * ETH_PRECISION\r\n\r\n    # changeCommissionRate()\r\n    # valid\r\n    await this.fund.changeCommissionRate(newVal, {from: owner})\r\n    assert.equal((await this.fund.commissionRate.call()).toNumber(), newVal, \"changeCommissionRate() faulty\")\r\n    # invalid\r\n    try\r\n      await this.fund.changeCommissionRate(invalidVal, {from: owner})\r\n      assert.fail(\"changeCommissionRate() accepted >=1 rate\")\r\n\r\n    # changeAssetFeeRate()\r\n    # valid\r\n    await this.fund.changeAssetFeeRate(newVal, {from: owner})\r\n    assert.equal((await this.fund.assetFeeRate.call()).toNumber(), newVal, \"changeAssetFeeRate() faulty\")\r\n    # invalid\r\n    try\r\n      await this.fund.changeAssetFeeRate(invalidVal, {from: owner})\r\n      assert.fail(\"changeAssetFeeRate() accepted >=1 rate\")\r\n  )\r\n\r\n  it(\"decrease_only_proportion_setters\", () ->\r\n    # changeDeveloperFeeRate()\r\n    devFeeRate = await this.fund.devFundingRate.call()\r\n    # valid\r\n    await this.fund.changeDeveloperFeeRate(devFeeRate.dividedToIntegerBy(2), {from: owner})\r\n    assert.equal((await this.fund.devFundingRate.call()).toNumber(), devFeeRate.dividedToIntegerBy(2).toNumber(), \"changeDeveloperFeeRate() faulty\")\r\n    # invalid -- >= 1\r\n    try\r\n      await this.fund.changeDeveloperFeeRate(BigNumber(ETH_PRECISION), {from: owner})\r\n      assert.fail(\"changeDeveloperFeeRate() accepted >=1 rate\")\r\n    # invalid -- larger than current value\r\n    try\r\n      await this.fund.changeDeveloperFeeRate(devFeeRate, {from: owner})\r\n      assert.fail(\"changeDeveloperFeeRate() accepted >= current rate\")\r\n\r\n    # changeExitFeeRate()\r\n    exitFeeRate = await this.fund.exitFeeRate.call()\r\n    # valid\r\n    await this.fund.changeExitFeeRate(exitFeeRate.dividedToIntegerBy(2), {from: owner})\r\n    assert.equal((await this.fund.exitFeeRate.call()).toNumber(), exitFeeRate.dividedToIntegerBy(2).toNumber(), \"changeExitFeeRate() faulty\")\r\n    # invalid -- >= 1\r\n    try\r\n      await this.fund.changeExitFeeRate(BigNumber(ETH_PRECISION), {from: owner})\r\n      assert.fail(\"changeExitFeeRate() accepted >=1 rate\")\r\n    # invalid -- larger than current value\r\n    try\r\n      await this.fund.changeExitFeeRate(exitFeeRate, {from: owner})\r\n      assert.fail(\"changeExitFeeRate() accepted >= current rate\")\r\n  )\r\n\r\n  it(\"address_setters\", () ->\r\n    newAddr = \"0xdd974d5c2e2928dea5f71b9825b8b646686bd200\"\r\n    zeroAddr = \"0x0\"\r\n    rep = await REP()\r\n    await this.fund.pause({from: owner})\r\n\r\n    # changeKyberNetworkAddress()\r\n    # valid address\r\n    await this.fund.changeKyberNetworkAddress(newAddr, {from: owner})\r\n    assert.equal(await this.fund.kyberAddr.call(), newAddr, \"changeKyberNetworkAddress() faulty\")\r\n    # invalid address\r\n    try\r\n      await this.fund.changeKyberNetworkAddress(zeroAddr, {from: owner})\r\n      assert.fail(\"changeKyberNetworkAddress() accepted zero address\")\r\n\r\n    # changeDeveloperFeeAccount()\r\n    # valid address\r\n    await this.fund.changeDeveloperFeeAccount(newAddr, {from: owner})\r\n    assert.equal(await this.fund.devFundingAccount.call(), newAddr, \"changeDeveloperFeeAccount() faulty\")\r\n    # invalid address\r\n    try\r\n      await this.fund.changeDeveloperFeeAccount(zeroAddr, {from: owner})\r\n      assert.fail(\"changeDeveloperFeeAccount() accepted zero address\")\r\n\r\n    # changeUSDCAddress()\r\n    # valid address\r\n    await this.fund.changeUSDCAddress(newAddr, {from: owner})\r\n    assert.equal(await this.fund.usdcAddr.call(), newAddr, \"changeUSDCAddress() faulty\")\r\n    # invalid address\r\n    try\r\n      await this.fund.changeUSDCAddress(zeroAddr, {from: owner})\r\n      assert.fail(\"changeUSDCAddress() accepted zero address\")\r\n\r\n    # changeControlTokenOwner()\r\n    # valid address\r\n    await this.fund.changeControlTokenOwner(newAddr, {from: owner})\r\n    assert.equal(await rep.owner.call(), newAddr, \"changeControlTokenOwner() faulty\")\r\n    # invalid address\r\n    try\r\n      await this.fund.changeControlTokenOwner(zeroAddr, {from: owner})\r\n      assert.fail(\"changeControlTokenOwner() accepted zero address\")\r\n\r\n    await this.fund.unpause({from: owner})\r\n  )\r\n\r\n  it(\"other_setters\", () ->\r\n    # changePhaseLengths()\r\n    newLengths = [1, 2, 3]\r\n    await this.fund.changePhaseLengths(newLengths, {from: owner})\r\n    result = (await this.fund.getPhaseLengths.call()).map((x) -> x.toNumber())\r\n    for i in [0..2]\r\n      assert.equal(result[i], newLengths[i], \"changePhaseLengths() faulty\")\r\n\r\n    # changeCallReward()\r\n    newReward = 2 * ETH_PRECISION\r\n    await this.fund.changeCallReward(newReward, {from: owner})\r\n    assert.equal((await this.fund.functionCallReward.call()).toNumber(), newReward, \"changeCallReward() faulty\")\r\n  )\r\n)"
  ]
}